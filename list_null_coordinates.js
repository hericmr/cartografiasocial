const fs = require('fs');
const path = require('path');

// Fun√ß√£o para listar todos os locais com coordenadas nulas
async function listNullCoordinates() {
  const insercoesDir = path.join(__dirname, 'inser√ß√µes');
  const files = fs.readdirSync(insercoesDir).filter(file => file.endsWith('.json'));
  
  console.log(`üîç Analisando ${files.length} arquivos na pasta inser√ß√µes...\n`);
  
  let allNullCoordinates = [];
  let totalRecords = 0;
  let validRecords = 0;
  
  for (const file of files) {
    try {
      const filePath = path.join(insercoesDir, file);
      const fileContent = fs.readFileSync(filePath, 'utf8');
      const data = JSON.parse(fileContent);
      
      console.log(`üìÑ Processando: ${file}`);
      console.log(`   Total de registros: ${data.length}`);
      
      // Filtrar registros com coordenadas nulas
      const nullCoordinates = data.filter(item => 
        item.latitude === null || 
        item.longitude === null || 
        item.status === 'n√£o encontrado'
      );
      
      const validCoordinates = data.filter(item => 
        item.latitude !== null && 
        item.longitude !== null && 
        item.status === 'encontrado'
      );
      
      console.log(`   ‚úÖ Coordenadas v√°lidas: ${validCoordinates.length}`);
      console.log(`   ‚ùå Coordenadas nulas: ${nullCoordinates.length}`);
      
      allNullCoordinates = allNullCoordinates.concat(nullCoordinates);
      totalRecords += data.length;
      validRecords += validCoordinates.length;
      
      console.log('');
      
    } catch (error) {
      console.error(`‚ùå Erro ao processar arquivo ${file}:`, error.message);
    }
  }
  
  // Remover duplicatas baseado no nome
  const uniqueNullCoordinates = allNullCoordinates.filter((item, index, self) => 
    index === self.findIndex(t => t.nome === item.nome)
  );
  
  console.log('='.repeat(80));
  console.log('üìä RESUMO GERAL');
  console.log('='.repeat(80));
  console.log(`Total de registros analisados: ${totalRecords}`);
  console.log(`Registros com coordenadas v√°lidas: ${validRecords}`);
  console.log(`Registros com coordenadas nulas: ${allNullCoordinates.length}`);
  console.log(`Registros √∫nicos com coordenadas nulas: ${uniqueNullCoordinates.length}`);
  console.log('');
  
  console.log('='.repeat(80));
  console.log('üìç LOCAIS QUE PRECISAM DE COORDENADAS MANUAIS');
  console.log('='.repeat(80));
  
  uniqueNullCoordinates.forEach((item, index) => {
    console.log(`${index + 1}. ${item.nome}`);
    console.log(`   üìç Endere√ßo: ${item.endereco}`);
    console.log(`   üìû Telefone: ${item.telefone || 'N√£o informado'}`);
    console.log(`   üìß Email: ${item.email || 'N√£o informado'}`);
    console.log(`   üîç Status: ${item.status}`);
    console.log(`   üìä Coordenadas atuais: ${item.latitude}, ${item.longitude}`);
    console.log('');
  });
  
  // Salvar lista em arquivo para refer√™ncia
  const outputFile = path.join(__dirname, 'locais_sem_coordenadas.json');
  fs.writeFileSync(outputFile, JSON.stringify(uniqueNullCoordinates, null, 2));
  console.log(`üíæ Lista salva em: ${outputFile}`);
  
  return uniqueNullCoordinates;
}

// Executar o script
if (require.main === module) {
  listNullCoordinates()
    .then(() => {
      console.log('\n‚úÖ An√°lise conclu√≠da!');
    })
    .catch(error => {
      console.error('‚ùå Erro na an√°lise:', error);
    });
}

module.exports = { listNullCoordinates };